---
AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation Template decomissions the DynamoDB Tables, removes
  the SysAdmin, and all tenants created by the application. (qs-1nlegmi33)
Parameters:
  Domain:
    Description: The Service Domain Obtained from API Gateway
    Type: String
  Protocol:
    Description: The Protocol for the Request
    Type: String
    Default: https://
  Path:
    Description: The Path for the request.
    Type: String
    Default: /sys/admin
  Body:
    Description: The Content for POST Request in JSON Format
    Type: String
    Default: 'null'
  Method:
    Description: The Type of Method. (Only "POST", "GET", or "DELETE")
    Type: String
    Default: DELETE
  S3Bucket:
    Description: The S3 Bucket Name
    Type: String
  S3BucketPrefix:
    Description: The S3 Bucket Prefix
    Type: String
Resources:
  ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ConfigPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: Logging
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  CleanSystem:
    Type: Custom::ConfigFile
    Properties:
      ServiceToken: !GetAtt UpdateConfigFunction.Arn
      Domain: !Ref Domain
      Protocol: !Ref Protocol
      Path: !Ref Path
      Body: !Ref Body
      Method: !Ref Method
  UpdateConfigFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates the System Admin for the Multi-Tenant Identity Platform
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt ConfigRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          # -----------------------------------------------------------------------------------------
          # MIT No Attribution
          # Permission is hereby granted, free of charge, to any person obtaining a copy of this
          # software and associated documentation files (the "Software"), to deal in the Software
          # without restriction, including without limitation the rights to use, copy, modify,
          # merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
          # permit persons to whom the Software is furnished to do so.
          # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
          # INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
          # PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
          # HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
          # OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
          # SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
          # -----------------------------------------------------------------------------------------
          import json
          import boto3
          import cfnresponse
          import urllib3

          s3 = boto3.resource('s3')
          http = urllib3.PoolManager()

          def create(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def update(properties, physical_id):
            return create(properties, None)

          def delete(properties, physical_id):
            #Example Code for Completeing a GET or POST JSON HTTP Request Using a Lambda Custom CloudFormation Resource
            domain = properties['Domain']
            print(domain)
            path = properties['Path']
            print(path)
            protocol = properties['Protocol']
            print(protocol)
            method = properties['Method']
            print(method)
            body = properties['Body']
            print(body)

            url = protocol + domain + path
            print(url)
            if method == 'POST':
              print('POST')
              print(body)

              r = http.request(
                  method,
                  url,
                  body=body,
                  headers={"Content-Type": "application/json"}
              )

              print('Response Status Code')
              print(r.status)
              if r.status == 200:
                print('POST REQUEST COMPLETED')
                return cfnresponse.SUCCESS, None
              else:
                raise Exception('Error response body: %s', r.data)
            elif method == 'GET':
              print('GET')
              r = http.request(method, url)
              print('Response Status Code')
              print(r.status)
              if r.status == 200:
                print(r.json())
                print('GET REQUEST COMPLETED')
                return cfnresponse.SUCCESS, None
            elif method == 'DELETE':
              print('DELETE')
              r = http.request(method, url)
              print('Response Status Code')
              print(r.status)
              if r.status == 200:
                print('DELETE REQUEST COMPLETED')
                return cfnresponse.SUCCESS, None
            else:
              print('INVALID REQUEST METHOD')

          def handler(event, context):
            print(("Received event: {}".format( json.dumps(event))))

            status = cfnresponse.FAILED
            new_physical_id = None

            try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')

              status, new_physical_id = {
                'Create': create,
                'Update': update,
                'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
            except Exception as e:
              print("Exception: %s" % e)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)
...
