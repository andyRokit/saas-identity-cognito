---
AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation Template removes an ECS Service (qs-1nlegmi18)
Parameters:
  Service:
    Description: The Elastic Container Service to Remove.
    Type: String
  Cluster:
    Description: The Elastic Container Service Cluster the service will be removed
      from.
    Type: String
  ServiceToken:
    Description: The Role ARN required to execute the Custom Resource.
    Type: String
Resources:
  UpdateConfig:
    Type: Custom::ConfigFile
    Properties:
      ServiceToken: !GetAtt UpdateConfigFunction.Arn
      Region: !Ref AWS::Region
      Service: !Ref Service
      Cluster: !Ref Cluster
  UpdateConfigFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Removes an ECS Service
      Handler: index.handler
      Runtime: python3.9
      Role: !Ref ServiceToken
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          s3 = boto3.resource('s3')

          def create(properties, physical_id):
            message = 'Create Complete'
            print(message)
            return cfnresponse.SUCCESS, None

          def update(properties, physical_id):
            return create(properties, physical_id)

          def delete(properties, physical_id):
            region = properties['Region']
            service = properties['Service']
            cluster = properties['Cluster']
            removeService(service, cluster)
            print('success')
            return cfnresponse.SUCCESS, physical_id

          def removeService(ecs_service, ecs_cluster):
              client = boto3.client('ecs')

              response = client.update_service(
                  cluster=ecs_cluster,
                  service=ecs_service,
                  desiredCount=0,
              )
              response = client.delete_service(
                  cluster=ecs_cluster,
                  service=ecs_service
              )

          def handler(event, context):
            print("Received event: {}".format( json.dumps(event)))

            status = cfnresponse.FAILED
            new_physical_id = None

            try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')

              status, new_physical_id = {
                'Create': create,
                'Update': update,
                'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
            except Exception as e:
              print("Exception: %s" % e)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)
...
